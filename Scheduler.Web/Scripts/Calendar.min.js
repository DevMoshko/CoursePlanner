function GUID() { var e = function () { return Math.floor(65536 * Math.random()).toString(16) }; return e() + e() } function Calendar(e, t, i) { this.items = {}, this.placeholder = e, this.parent = t, this.name = i, this.placeholder.innerHTML = this.getBaseCalendar(), this.itemSlot = new Array(5), this.tempItem = []; for (var r = 0; 5 > r; r++) { this.itemSlot[r] = new Array(96); for (var a = 0; 96 > a; a++) this.itemSlot[r][a] = new Array } $(".timeGrid").width(($(this.placeholder).width() - 40) / 5) } function CalendarCollection(e, t) { this.placeholder = e, this.list = t, this.split = !0, $(e).append("<div id='calendarControlBar' class='widgetTitle2'><div id='downloadIcs' class='calendarControls hasTooltip' data-tooltip='Export iCal'>Export to iCal</div><div id='shareLink' class='calendarControls hasTooltip' data-tooltip='Share Calendar'>Share Timetable</div><div id='splitView' class='calendarControls selected'>Both</div><div id='winterView' class='calendarControls'>Winter</div><div id='fallView' class='calendarControls'>Fall</div></div>"), $(e).append("<div id='fallCalendar' class='singleCalendar split'></div>"), $(e).append("<div id='winterCalendar' class='singleCalendar split'></div>"), this.fallCalendar = new Calendar($("#fallCalendar")[0], this, "Fall"), this.winterCalendar = new Calendar($("#winterCalendar")[0], this, "Winter"), $("#fallView").click(function () { $(this.fallCalendar.placeholder).hide(), $(this.winterCalendar.placeholder).hide(), $(".calendarControls.selected").removeClass("selected"), $("#fallView").addClass("selected"), $(this.fallCalendar.placeholder).show("slide", 200, function () { this.split = !1, this.resize() }.bind(this)) }.bind(this)), $("#winterView").click(function () { $(this.fallCalendar.placeholder).hide(), $(this.winterCalendar.placeholder).hide(), $(".calendarControls.selected").removeClass("selected"), $("#winterView").addClass("selected"), $(this.winterCalendar.placeholder).show("slide", 200, function () { this.split = !1, this.resize() }.bind(this)) }.bind(this)), $("#splitView").click(function () { $(this.fallCalendar.placeholder).hide(), $(this.winterCalendar.placeholder).hide(), $(".calendarControls.selected").removeClass("selected"), $("#splitView").addClass("selected"), $(this.winterCalendar.placeholder).show("slide", 200), $(this.fallCalendar.placeholder).show("slide", 200, function () { this.split = !0, this.resize() }.bind(this)) }.bind(this)), $("#downloadIcs").click(function () { var e = this.getAllSectionsString(); $("#hiddenDownloader").attr("src", "Handlers/ICalHandler.ashx?Courses=" + e) }.bind(this)), $("#shareLinkDropDown").css("top", $("#shareLink").offset().top + 35), $("#shareLinkDropDown").css("left", $("#shareLink").offset().left), $("#shareLinkDropDown").hide(), $("#shareLink").toggle(function () { $("#shareLink").addClass("selected"); var e = "http://griddy.org?link=" + this.getAllSectionsString(); $("#shareLinkText").val(e), $("#rrLink").attr("href", "http://widget.renren.com/dialog/share?resourceUrl=" + e + "&srcUrl=" + e + "&title=My timetable&description=" + Base64.decode(this.getAllSectionsString())), $("#wbLink").attr("href", "http://service.weibo.com/share/share.php?title=My%20Timetable&url=" + e + "&source=bookmark"), $("#twLink").attr("href", "https://twitter.com/share?url=" + e), $("#fbLink").attr("href", "https://www.facebook.com/sharer/sharer.php?u=" + e), $("#shareLinkDropDown").show(200) }.bind(this), function () { $("#shareLink").removeClass("selected"), $("#shareLinkDropDown").hide(200) }), $("#shareLinkText").focus(function () { $(this).select() }) } Function.prototype.bind || (Function.prototype.bind = function (e) { if ("function" != typeof this) throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable"); var t = Array.prototype.slice.call(arguments, 1), i = this, r = function () { }, a = function () { return i.apply(this instanceof r && e ? this : e, t.concat(Array.prototype.slice.call(arguments))) }; return r.prototype = this.prototype, a.prototype = new r, a }), Array.prototype.indexOf || (Array.prototype.indexOf = function (e) { "use strict"; if (void 0 === this || null === this) throw new TypeError; var t = Object(this), i = t.length >>> 0; if (0 === i) return -1; var r = 0; if (arguments.length > 0 && (r = Number(arguments[1]), r !== r ? r = 0 : 0 !== r && r !== 1 / 0 && r !== -(1 / 0) && (r = (r > 0 || -1) * Math.floor(Math.abs(r)))), r >= i) return -1; for (var a = r >= 0 ? r : Math.max(i - Math.abs(r), 0) ; i > a; a++) if (a in t && t[a] === e) return a; return -1 }), Calendar.prototype.addItem = function (e) { if ($(".t" + (e.StartTime - 32)).position()) { e.UID = GUID(); var t = e.Time.split(" "); parsedTime = t[2 * e.Order + 1]; var i = "", r = ""; if (e.Location) { var i = e.Location.split(" "); r = i[e.Order] } var a = e.UID; this.items[a] = e; for (var l = e.StartTime; l < e.EndTime; l++) this.itemSlot[e.Day - 1][l].push(e); this.refreshDivision(e); var n = "<div class='calendarItem course" + e.CourseID + " cal" + e.ID + " " + e.Campus + "' id='" + e.UID + "'><div class='itemInfo'><b>" + e.Abbr + "</b><br />" + parsedTime + "<br/>@ " + r + "</div></div>"; $(this.placeholder).find(".calendarContentWrapper").append(n), this.resize(), $("#" + e.UID).hover(function () { $(".cal" + e.ID).each(function () { $(this).addClass("hover") }) }, function () { $(".cal" + e.ID).each(function () { $(this).removeClass("hover") }) }), $("#" + e.UID).click(function (e) { $("#listItem" + this.items[$(e.delegateTarget).attr("id")].CourseID).click() }.bind(this)) } }, Calendar.prototype.removeItem = function (e) { for (var t = $(this.placeholder).find(".cal" + e), i = 0; i < t.length; i++) { for (var r = $(t[i]).attr("id"), a = this.items[r].StartTime; a < this.items[r].EndTime; a++) { var l = this.itemSlot[this.items[r].Day - 1][a]; l.splice(l.indexOf(this.items[r]), 1) } delete this.items[r] } t.remove(), $("#calItemInfo").hide(), this.resize() }, Calendar.prototype.removeCourse = function (e) { for (var t = $(this.placeholder).find(".course" + e), i = 0; i < t.length; i++) { for (var r = $(t[i]).attr("id"), a = this.items[r].StartTime; a < this.items[r].EndTime; a++) { var l = this.itemSlot[this.items[r].Day - 1][a]; l.splice(l.indexOf(this.items[r]), 1) } delete this.items[r] } t.remove(), $("#calItemInfo").hide(), this.resize() }, Calendar.prototype.getBaseCalendar = function () { var e = "<table><tr class='calendarHeader'><td class='name'>" + this.name + "</td><td class='w0 timeGrid'>Mon</td><td class='w1 timeGrid'>Tue</td><td class='w2 timeGrid'>Wed</td><td class='w3 timeGrid'>Thu</td><td class='w4 timeGrid'>Fri</td></tr></table>"; e += "<div class='calendarContentStatic'><div class='calendarContentWrapper'>", e += "<table class='calendarContent'>"; for (var t = 0; 56 >= t; t++) { if (e += "<tr class='t" + t + (t % 4 == 0 ? " line" : "") + "'>", t % 4 == 0) { e += "<td class='timeDisplay' rowspan='4'>", e += t / 4 + 8 + ":00", e += "</td>"; for (var i = 0; 5 > i; i++) e += "<td class='line'></td>" } else for (var i = 0; 5 > i; i++) e += "<td></td>"; e += "</tr>" } return e += "</table></div></div>" }, Calendar.prototype.refreshDivision = function (e) { for (var t = 0, i = {}, r = e.StartTime; r < e.EndTime; r++) { var a = this.itemSlot[e.Day - 1][r], l = 0; for (var n in a) a[n].UID && a[n].UID !== e.UID && (i[a[n].HPosition] = !0, a[n].Division = a.length, l++); l > t && (t = l) } e.Division = t + 1; for (var a = 0, r = 0; t >= r; r++) i[r] || (a = r); e.HPosition = a }, Calendar.prototype.resize = function () { $(this.placeholder).find(".calendarContentStatic").height($(this.placeholder).height() - 35); var e = $(this.placeholder).find(".timeGrid"); e.width(($(this.placeholder).width() - 60) / 5), $(this.placeholder).find("td.line").width(($(this.placeholder).width() - 60) / 5), $(this.placeholder).find(".timeDisplay").width($(this.placeholder).find(".name").width()); for (var t in this.items) { var i = $("#" + t), r = $(this.placeholder).find(".t" + (this.items[t].StartTime - 32)).position().top, a = $(this.placeholder).find(".t" + (this.items[t].EndTime - 32)).position().top, l = a - r - 3; this.refreshDivision(this.items[t]); var n = (e.width() - 10) / this.items[t].Division, s = $(this.placeholder).find(".w" + (this.items[t].Day - 1)), o = s.position().left - 2 + n * this.items[t].HPosition; i.width(n - 5), i.height(l), i.css("left", o), i.css("top", r), this.items[t].Division > 1 ? i.addClass("conflict") : i.hasClass("conflict") && i.removeClass("conflict") } }, Calendar.prototype.isConflicted = function (e) { for (var t = this.hasItem(e), i = e.StartTime; i < e.EndTime; i++) { if (this.itemSlot[e.Day - 1][i].length > 0 && !t) return !0; if (this.itemSlot[e.Day - 1][i].length > 1) return !0 } return !1 }, Calendar.prototype.hasItem = function (e) { return $(this.placeholder).find(".cal" + e.ID).length > 0 }, Calendar.prototype.tempAdd = function (e) { this.tempItem.push(e), this.addItem(e) }, Calendar.prototype.tempRemove = function () { this.onTempAnimation = !1; for (var e in this.tempItem) this.removeItem(this.tempItem[e].ID); this.tempItem = [] }, Calendar.prototype.highlight = function (e) { $(this.placeholder).children(".highlight").removeClass("highlight"), $(this.placeholder).children(".course" + e).addClass("highlight") }, Calendar.prototype.scrollForItem = function (e) { if (this.hasItem(e)) { var t = $(".cal" + e.ID).position().top; ($(this.placeholder).find(".calendarContentStatic").scrollTop() > t || $(this.placeholder).height() + $(this.placeholder).scrollTop() - 40 < t) && $(this.placeholder).find(".calendarContentStatic").animate({ scrollTop: t }, 300) } }, Calendar.prototype.getSelectedSlot = function () { }, Calendar.prototype.getChildItem = function (e) { return $(this.placeholder).children(".cal" + e) }, CalendarCollection.prototype.resize = function () { $(".singleCalendar").height($(this.placeholder).height() - 40), this.split ? $(".singleCalendar").width($(this.placeholder).width() / 2 - 11) : $(".singleCalendar").width($(this.placeholder).width() - 12), this.fallCalendar.resize(), this.winterCalendar.resize() }, CalendarCollection.prototype.addItem = function (e) { ("F" == e.Semester || "Y" == e.Semester) && this.fallCalendar.addItem(e), ("S" == e.Semester || "Y" == e.Semester) && this.winterCalendar.addItem(e) }, CalendarCollection.prototype.removeItem = function (e) { this.fallCalendar.removeItem(e), this.winterCalendar.removeItem(e) }, CalendarCollection.prototype.tempAdd = function (e) { ("F" == e.Semester || "Y" == e.Semester) && this.fallCalendar.tempAdd(e), ("S" == e.Semester || "Y" == e.Semester) && this.winterCalendar.tempAdd(e) }, CalendarCollection.prototype.tempRemove = function () { this.fallCalendar.tempRemove(), this.winterCalendar.tempRemove() }, CalendarCollection.prototype.isConflicted = function (e) { return ("F" !== e.Semester && "Y" !== e.Semester || !this.fallCalendar.isConflicted(e)) && ("S" !== e.Semester && "Y" !== e.Semester || !this.winterCalendar.isConflicted(e)) ? !1 : !0 }, CalendarCollection.prototype.hasItem = function (e) { return this.fallCalendar.hasItem(e) || this.winterCalendar.hasItem(e) }, CalendarCollection.prototype.highlight = function (e) { this.fallCalendar.highlight(e), this.winterCalendar.highlight(e) }, CalendarCollection.prototype.scrollForItem = function (e) { this.fallCalendar.scrollForItem(e), this.winterCalendar.scrollForItem(e) }, CalendarCollection.prototype.getAllSectionsString = function () { var e = "", t = {}; return $.each(this.fallCalendar.items, function (i, r) { t[r.ID] || ("" !== e && (e += ","), e += r.Abbr, t[r.ID] = r) }), $.each(this.winterCalendar.items, function (i, r) { t[r.ID] || ("" !== e && (e += ","), e += r.Abbr, t[r.ID] = r) }), Base64.encode(e) }, CalendarCollection.prototype.removeCourse = function (e) { this.fallCalendar.removeCourse(e), this.winterCalendar.removeCourse(e) };